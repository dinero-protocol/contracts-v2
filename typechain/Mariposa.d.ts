/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MariposaInterface extends ethers.utils.Interface {
  functions: {
    "addDepartment(bool,uint256,uint256,uint256)": FunctionFragment;
    "authority()": FunctionFragment;
    "btrfly()": FunctionFragment;
    "cap()": FunctionFragment;
    "currentEmissions()": FunctionFragment;
    "currentOutstanding()": FunctionFragment;
    "departmentCount()": FunctionFragment;
    "distribute()": FunctionFragment;
    "epochSeconds()": FunctionFragment;
    "getAddressDepartment(address)": FunctionFragment;
    "getDepartment(uint256)": FunctionFragment;
    "getDepartmentBalance(uint256)": FunctionFragment;
    "lastEpoch()": FunctionFragment;
    "owner()": FunctionFragment;
    "request(uint256)": FunctionFragment;
    "setAddressDepartment(uint256,address)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setDepartmentAdjustment(bool,uint256,uint256,uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDepartment",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "btrfly", values?: undefined): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentEmissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOutstanding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "departmentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressDepartment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepartment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepartmentBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lastEpoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressDepartment",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepartmentAdjustment",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addDepartment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btrfly", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOutstanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "departmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressDepartment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepartment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepartmentBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastEpoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddressDepartment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepartmentAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;

  events: {
    "AddressDepartmentSet(uint256,address)": EventFragment;
    "AuthorityUpdated(address,address)": EventFragment;
    "DepartmentAdded(uint256)": EventFragment;
    "DepartmentAdjustmentSet(bool,uint256,uint256,uint256)": EventFragment;
    "DepartmentTransfer(uint256,uint256,uint256)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressDepartmentSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepartmentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepartmentAdjustmentSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepartmentTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
}

export type AddressDepartmentSetEvent = TypedEvent<
  [BigNumber, string] & { department: BigNumber; recipient: string }
>;

export type AuthorityUpdatedEvent = TypedEvent<
  [string, string] & { user: string; newAuthority: string }
>;

export type DepartmentAddedEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type DepartmentAdjustmentSetEvent = TypedEvent<
  [boolean, BigNumber, BigNumber, BigNumber] & {
    addAdjustment: boolean;
    id: BigNumber;
    adjustmentRate: BigNumber;
    adjustmentTarget: BigNumber;
  }
>;

export type DepartmentTransferEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    from: BigNumber;
    to: BigNumber;
    amount: BigNumber;
  }
>;

export type OwnerUpdatedEvent = TypedEvent<
  [string, string] & { user: string; newOwner: string }
>;

export class Mariposa extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MariposaInterface;

  functions: {
    addDepartment(
      addAdjustment_: boolean,
      mintRate_: BigNumberish,
      adjustmentRate_: BigNumberish,
      adjustmentTarget_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    btrfly(overrides?: CallOverrides): Promise<[string]>;

    cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEmissions(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { emissions: BigNumber }>;

    currentOutstanding(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { outstanding: BigNumber }>;

    departmentCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAddressDepartment(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepartment(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        addAdjustment: boolean;
        mintRate: BigNumber;
        adjustmentRate: BigNumber;
        adjustmentTarget: BigNumber;
      }
    >;

    getDepartmentBalance(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    request(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddressDepartment(
      departmentId_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepartmentAdjustment(
      addAdjustment_: boolean,
      departmentId: BigNumberish,
      adjustmentRate_: BigNumberish,
      adjustmentTarget_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addDepartment(
    addAdjustment_: boolean,
    mintRate_: BigNumberish,
    adjustmentRate_: BigNumberish,
    adjustmentTarget_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  btrfly(overrides?: CallOverrides): Promise<string>;

  cap(overrides?: CallOverrides): Promise<BigNumber>;

  currentEmissions(overrides?: CallOverrides): Promise<BigNumber>;

  currentOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

  departmentCount(overrides?: CallOverrides): Promise<BigNumber>;

  distribute(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  getAddressDepartment(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepartment(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      addAdjustment: boolean;
      mintRate: BigNumber;
      adjustmentRate: BigNumber;
      adjustmentTarget: BigNumber;
    }
  >;

  getDepartmentBalance(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  request(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddressDepartment(
    departmentId_: BigNumberish,
    recipient_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepartmentAdjustment(
    addAdjustment_: boolean,
    departmentId: BigNumberish,
    adjustmentRate_: BigNumberish,
    adjustmentTarget_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDepartment(
      addAdjustment_: boolean,
      mintRate_: BigNumberish,
      adjustmentRate_: BigNumberish,
      adjustmentTarget_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    authority(overrides?: CallOverrides): Promise<string>;

    btrfly(overrides?: CallOverrides): Promise<string>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    currentEmissions(overrides?: CallOverrides): Promise<BigNumber>;

    currentOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    departmentCount(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(overrides?: CallOverrides): Promise<void>;

    epochSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getAddressDepartment(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepartment(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        addAdjustment: boolean;
        mintRate: BigNumber;
        adjustmentRate: BigNumber;
        adjustmentTarget: BigNumber;
      }
    >;

    getDepartmentBalance(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    request(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setAddressDepartment(
      departmentId_: BigNumberish,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthority(
      newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepartmentAdjustment(
      addAdjustment_: boolean,
      departmentId: BigNumberish,
      adjustmentRate_: BigNumberish,
      adjustmentTarget_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddressDepartmentSet(uint256,address)"(
      department?: BigNumberish | null,
      recipient?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { department: BigNumber; recipient: string }
    >;

    AddressDepartmentSet(
      department?: BigNumberish | null,
      recipient?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { department: BigNumber; recipient: string }
    >;

    "AuthorityUpdated(address,address)"(
      user?: string | null,
      newAuthority?: string | null
    ): TypedEventFilter<
      [string, string],
      { user: string; newAuthority: string }
    >;

    AuthorityUpdated(
      user?: string | null,
      newAuthority?: string | null
    ): TypedEventFilter<
      [string, string],
      { user: string; newAuthority: string }
    >;

    "DepartmentAdded(uint256)"(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    DepartmentAdded(
      id?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "DepartmentAdjustmentSet(bool,uint256,uint256,uint256)"(
      addAdjustment?: null,
      id?: BigNumberish | null,
      adjustmentRate?: null,
      adjustmentTarget?: null
    ): TypedEventFilter<
      [boolean, BigNumber, BigNumber, BigNumber],
      {
        addAdjustment: boolean;
        id: BigNumber;
        adjustmentRate: BigNumber;
        adjustmentTarget: BigNumber;
      }
    >;

    DepartmentAdjustmentSet(
      addAdjustment?: null,
      id?: BigNumberish | null,
      adjustmentRate?: null,
      adjustmentTarget?: null
    ): TypedEventFilter<
      [boolean, BigNumber, BigNumber, BigNumber],
      {
        addAdjustment: boolean;
        id: BigNumber;
        adjustmentRate: BigNumber;
        adjustmentTarget: BigNumber;
      }
    >;

    "DepartmentTransfer(uint256,uint256,uint256)"(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { from: BigNumber; to: BigNumber; amount: BigNumber }
    >;

    DepartmentTransfer(
      from?: BigNumberish | null,
      to?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { from: BigNumber; to: BigNumber; amount: BigNumber }
    >;

    "OwnerUpdated(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;

    OwnerUpdated(
      user?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;
  };

  estimateGas: {
    addDepartment(
      addAdjustment_: boolean,
      mintRate_: BigNumberish,
      adjustmentRate_: BigNumberish,
      adjustmentTarget_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    btrfly(overrides?: CallOverrides): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    currentEmissions(overrides?: CallOverrides): Promise<BigNumber>;

    currentOutstanding(overrides?: CallOverrides): Promise<BigNumber>;

    departmentCount(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getAddressDepartment(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepartment(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepartmentBalance(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    request(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddressDepartment(
      departmentId_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepartmentAdjustment(
      addAdjustment_: boolean,
      departmentId: BigNumberish,
      adjustmentRate_: BigNumberish,
      adjustmentTarget_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDepartment(
      addAdjustment_: boolean,
      mintRate_: BigNumberish,
      adjustmentRate_: BigNumberish,
      adjustmentTarget_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btrfly(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEmissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentOutstanding(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    departmentCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAddressDepartment(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepartment(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepartmentBalance(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    request(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddressDepartment(
      departmentId_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepartmentAdjustment(
      addAdjustment_: boolean,
      departmentId: BigNumberish,
      adjustmentRate_: BigNumberish,
      adjustmentTarget_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
